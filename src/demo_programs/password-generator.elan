# 3c28c78af70bf13a98b835129f7e8a1b303ff8531b4f2e60d6c32c23add1ff08 Elan 1.1.2 guest default_profile valid

# Ideas for further development
# - rule for no more than 'n' same characters in succession
constant upperChars set to "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

constant lowerChars set to "abcdefghijklmnopqrstuvwxyz"

constant digitChars set to "01234567890"

constant symbolChars set to "!$%^&*"

constant length set to 32

constant upper set to true

constant lower set to true

constant digit set to true

constant symbol set to true

main
  let all be upperChars + lowerChars + digitChars + symbolChars
  variable password set to ""
  variable valid set to false
  while not valid
    set password to ""
    call populatePassword(password, all)
    set valid to isValid(password, upper, lower, digit, symbol)
  end while
  print password
end main

procedure populatePassword(out password as String, all as String)
  for i from 1 to length step 1
    variable rnd set to randomInt(0, all.length() - 1)
    set password to password + all[rnd]
  end for
end procedure

function isValid(password as String, mustHaveUpper as Boolean, mustHaveLower as Boolean, mustHaveDigit as Boolean, mustHaveSymbol as Boolean) returns Boolean
  let validForUpper be passesRule(mustHaveUpper, upperChars, password)
  let validForLower be passesRule(mustHaveLower, lowerChars, password)
  let validForDigits be passesRule(mustHaveDigit, digitChars, password)
  let validForSymbols be passesRule(mustHaveSymbol, symbolChars, password)
  return validForUpper and validForLower and validForDigits and validForSymbols
end function

test isValid
  assert isValid("$4De", true, true, true, true) is true
  assert isValid("$4de", true, true, true, true) is false
  assert isValid("$4de", false, true, true, true) is true
  assert isValid("eD$4", true, true, true, true) is true
  assert isValid("$4De$4De", true, true, true, true) is true
end test

function passesRule(rule as Boolean, charSet as String, password as String) returns Boolean
  return (not rule) or hasAtLeastOneFrom(charSet, password)
end function

test passesRule
  assert passesRule(true, "12A", "ABC") is true
  assert passesRule(false, "12A", "ABC") is true
  assert passesRule(true, "12", "ABCD") is false
  assert passesRule(false, "12", "ABCD") is true
end test

function hasAtLeastOneFrom(fromChars as String, password as String) returns Boolean
  variable hasOne set to false
  each ch in password
    set hasOne to hasOne or fromChars.contains(ch)
  end each
  return hasOne
end function

test hasAtLeastOneFrom
  assert hasAtLeastOneFrom("12A", "ABC") is true
  assert hasAtLeastOneFrom("C12", "ABC") is true
  assert hasAtLeastOneFrom("12", "ABCD") is false
end test
