# f655e3961f9c6d7de856c95da85bc10b6bc8f1f06b5ef99a8d3a46efe1279de4 Elan 1.1.2 guest default_profile valid

# Exercise: implement a function to sort a list of strings into alphabetical order,
# using the 'merge sort' algorithm to 
# The code below defines the signature of two functions 'merge' and 'sort'.
# It compiles, but fails many of the tests. Your task is to implement the two functions
# (one will call the other) until all tests pass.
# When you have completed the two tasks below, write a 'main' routine that demonstrates a
# possible use of the 'sort` function.
# 
# 1. Implement the merge function to get all the asserts in 'test merge' passing,
# assuming that both the input lists - a, b - are already sorted.
# Hints:
# - Implementation should be recursive
# - Body be implemented by adding a single 'if' statement with multiple 'else` clauses,
#   each of which sets the 'result'
# - Deal first with the case that either a or b is empty, which you can test using .length()
# - Otherwise, compare the first element in each list and set 'result' to a new list
#   containing the earlier one, to which you can then append (using .withAppendList) a merged
#   version of the remaining two lists without the selected element
# - You can use indexes [0] and [1..] to extract the head and tail of each list
#   or the .head() and .tail() methods if you prefer
function merge(a as List<of String>, b as List<of String>) returns List<of String>
  variable result set to empty List<of String>
  return result
end function

# 2. Implement the sort function to get all remaining tests passing
# Hints:
# - Split the input lists into two approximately-equal halves, then
# - Sort each half separately (by a recursive call to 'sort')
# - 'merge' the two halves
# - As with any recursive function call, think about the termination condition
# - body can be implemented by adding a single 'if' statement, though we recommend you add
#   'let' statements to avoid duplicating sub-expressions and/or to improve readability
function sort(li as List<of String>) returns List<of String>
  variable result set to li
  return result
end function

test merge
  let emptyList be empty List<of String>
  assert merge(emptyList, emptyList) is emptyList
  assert merge(["orange"], ["melon"]) is ["melon", "orange"]
  let l1 be ["apple", "lime", "pear"]
  let l2 be ["apricot", "lemon", "plum"]
  assert merge(l1, l2) is ["apple", "apricot", "lemon", "lime", "pear", "plum"]
  assert merge(l2, l1) is ["apple", "apricot", "lemon", "lime", "pear", "plum"]
  assert merge(l1, emptyList) is l1
  assert merge(emptyList, l2) is l2
  assert merge(l1, l1) is ["apple", "apple", "lime", "lime", "pear", "pear"]
end test

test sort
  let emptyList be empty List<of String>
  assert sort(emptyList) is emptyList
  let li2 be ["plum"]
  assert sort(li2) is li2
  let li3 be ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"]
  let sorted3 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "plum", "strawberry"]
  assert sort(li3) is sorted3
  let li4 be ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry"]
  let sorted4 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "plum", "strawberry"]
  assert sort(li4) is sorted4
  let li5 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"]
  assert sort(li5) is li5
end test
