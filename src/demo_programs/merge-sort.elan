# 957b81202b689b60cabb05bb78656e9028b462c1957c92589f3f02a9d1c2181b Elan 1.2.4 guest default_profile valid

function sort(li as List<of String>) returns List<of String>
  variable result set to li
  # Write your implementation here, using the 'mergeSort' algorithm
  return result
end function

test sort
  # 1. Edge case: empty
  let l1 be empty List<of String>
  assert sort(l1) is l1
  # 2. Edge case: one item
  let li2 be ["plum"]
  assert sort(li2) is li2
  # 3. Happy case: odd number of members
  let li3 be ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry", "pear"]
  let sorted3 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "plum", "strawberry"]
  assert sort(li3) is sorted3
  # 4. Happy case: even number of members
  let li4 be ["plum", "apricot", "lime", "lemon", "melon", "apple", "orange", "strawberry"]
  let sorted4 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "plum", "strawberry"]
  assert sort(li4) is sorted4
  # 5. Edge case: already sorted
  let li5 be ["apple", "apricot", "lemon", "lime", "melon", "orange", "pear", "strawberry"]
  assert sort(li5) is li5
end test

# Merges two already-sorted lists (of potentially different lengths) into one sorted list
function merge(a as List<of String>, b as List<of String>) returns List<of String>
  variable result set to empty List<of String>
  if a.length() is 0 then
    set result to b
  else if b.length() is 0 then
    set result to a
  else if a[0].isBefore(b[0]) then
    set result to [a[0]].withAppendList(merge(a[1..], b))
  else
    set result to [b[0]].withAppendList(merge(a, b[1..]))
  end if
  return result
end function

test merge
  let le be empty List<of String>
  let l1 be ["apple", "lime", "pear"]
  let l2 be ["apricot", "lemon", "plum", "watermelon"]
  assert merge(le, le) is le
  assert merge(["orange"], ["melon"]) is ["melon", "orange"]
  assert merge(l1, l2) is ["apple", "apricot", "lemon", "lime", "pear", "plum", "watermelon"]
  assert merge(l2, l1) is ["apple", "apricot", "lemon", "lime", "pear", "plum", "watermelon"]
  assert merge(l1, le) is l1
  assert merge(le, l2) is l2
  assert merge(l1, l1) is ["apple", "apple", "lime", "lime", "pear", "pear"]
end test
