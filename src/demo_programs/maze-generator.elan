# a37fb448ab88ec4e995767afd0ce5b9febd316fcbae085083c822f027775e036 Elan 1.1.2 guest default_profile valid

main
  variable blocks set to new Array2D<of Int>(40, 30, black)
  set blocks to createStart(blocks)
  for i from 0 to displayWidth step 1
    let x be randomInt(0, 39)
    let y be randomInt(0, 29)
    let p be newPoint(x, y)
    let existing be getValue(p, blocks)
    let setTo be (random() + 0.7).floor()
    if okToSet(p, setTo, blocks) then
      let colour be if setTo is 1 then white else black
      set blocks to blocks.withPut(p.x, p.y, colour)
    end if
  end for
  call displayBlocks(blocks)
  let name be inputString("File name to save: ")
  if name isnt "x" then
    call saveAsFile(name, blocks)
  end if
end main

constant displayWidth set to 150

procedure saveAsFile(name as String, b as Array2D<of Int>)
  let file be createFileForWriting(name)
  for row from 0 to 29 step 1
    variable line set to ""
    for col from 0 to 39 step 1
      let colour be b[col, row]
      let symbol be if colour is white then " " else "X"
      set line to line + symbol
    end for
    call file.writeLine(line)
  end for
  call file.saveAndClose()
end procedure

function createStart(b as Array2D<of Int>) returns Array2D<of Int>
  variable b2 set to b
  for i from 0 to 15 step 2
    set b2 to addRectangle(b2, i, i, 39 - 2*i, 29 - 2*i)
  end for
  return b2
end function

function addRectangle(b as Array2D<of Int>, startX as Int, startY as Int, width as Int, depth as Int) returns Array2D<of Int>
  let paint be white
  variable b2 set to b
  for x from startX to startX + width step 1
    set b2 to b2.withPut(x, startY, paint)
    set b2 to b2.withPut(x, startY + depth, paint)
  end for
  for y from startY to startY + depth step 1
    set b2 to b2.withPut(startX, y, paint)
    set b2 to b2.withPut(startX + width, y, paint)
  end for
  return b2
end function

# colour: 0 for black, 1 for white
function okToSet(p as Point, colour as Int, g as Array2D<of Int>) returns Boolean
  let n be p.neighbouringPoints().map(lambda p as Point => getValue(p, g))
  let q1 be isValidQuadrant(n[0] + n[1]*2 + colour*4 + n[3]*8)
  let q2 be isValidQuadrant(n[1] + n[2]*2 + n[4]*4 + colour*8)
  let q3 be isValidQuadrant(colour + n[4]*2 + n[7]*4 + n[6]*8)
  let q4 be isValidQuadrant(n[3] + colour*2 + n[6]*4 + n[5]*8)
  return q1 and q2 and q3 and q4
end function

function getValue(p as Point, b as Array2D<of Int>) returns Int
  variable result set to 0
  if (p.x > -1) and (p.x < 40) and (p.y > -1) and (p.y < 30) then
    let colour be b[p.x, p.y]
    set result to if colour is black then 0 else 1
  end if
  return result
end function

function flip01(v as Int) returns Int
  return if v is 0 then 1 else 0
end function

test flip01
  assert flip01(0) is 1
  assert flip01(1) is 0
end test

function isValidQuadrant(q as Int) returns Boolean
  return (q mod 5) isnt 0
end function

test isValidQuadrant
  assert isValidQuadrant(0) is false
  assert isValidQuadrant(1) is true
  assert isValidQuadrant(2) is true
  assert isValidQuadrant(3) is true
  assert isValidQuadrant(4) is true
  assert isValidQuadrant(5) is false
  assert isValidQuadrant(6) is true
  assert isValidQuadrant(7) is true
  assert isValidQuadrant(8) is true
  assert isValidQuadrant(9) is true
  assert isValidQuadrant(10) is false
  assert isValidQuadrant(11) is true
  assert isValidQuadrant(12) is true
  assert isValidQuadrant(13) is true
  assert isValidQuadrant(14) is true
  assert isValidQuadrant(15) is false
end test

record Point
  property x as Int

  property y as Int

  property isNotEmpty as Boolean

  # Returns the 8 theoretically-neighbouring points, whether or not within bounds
  function neighbouringPoints() returns List<of Point>
    return [newPoint(property.x - 1, property.y - 1), newPoint(property.x, property.y - 1), newPoint(property.x + 1, property.y - 1), newPoint(property.x - 1, property.y), newPoint(property.x + 1, property.y), newPoint(property.x - 1, property.y + 1), newPoint(property.x, property.y + 1), newPoint(property.x + 1, property.y + 1)]
  end function

end record

function newPoint(x as Int, y as Int) returns Point
  return new Point() with x set to x, y set to y, isNotEmpty set to true
end function

test neighbouringPoints
  let p be newPoint(0, 0)
  let n be p.neighbouringPoints()
  let expected be [newPoint(-1, -1), newPoint(0, -1), newPoint(1, -1), newPoint(-1, 0), newPoint(1, 0), newPoint(-1, 1), newPoint(0, 1), newPoint(1, 1)]
  assert n is expected
end test
