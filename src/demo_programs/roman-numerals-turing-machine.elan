# 9cecef3807b577358b2a063126f7dfdef997802dc31fe93d6e8a8c8da6411ca3 Elan 1.1.2 guest default_profile valid

# Turing Machine that converts a Year from decimal to roman numerals
# Run the program, enter the number to convert and watch the machine in action.
# This TM has 300+ transition rules! You can use the same TuringMachine class to solve
# a simpler task, just by writing rules in the same format:
# newRule("currentState", "readSymbol", "newState", "writeSymbol", DirectionForHeadMove)
main
  variable tm set to new TuringMachine(initState, haltState)
  call addRulesForRomanNumeralsInto(tm)
  let decimal be inputIntBetween("Enter a year:", 1, 3999)
  call tm.setTape(decimal.asString())
  variable steps set to 0
  while not tm.isHalted()
    let rule be tm.findMatchingRule()
    call tm.singleStep()
    set steps to steps + 1
    call clearPrintedText()
    call printLine(tm.tape)
    call printTab(tm.headPosition - 1, "^\n")
    call printLine("Step: {steps}\nState: {tm.currentState}\nRule applied: {rule.asString()}")
    call pause(40)
  end while
  print "\n\nThe roman numeral equivalent for {decimal} is {tm.tape.trim()}"
end main

constant initState set to "init"

constant haltState set to "halt"

class TuringMachine
  constructor(initialState as String, haltState as String)
    set property.initialState to initialState
    set property.haltState to haltState
    set property.rules to empty ListImmutable<of Rule>
    set property.currentState to initialState
    set property.headPosition to 0
  end constructor

  property initialState as String

  property currentState as String

  property headPosition as Int

  property haltState as String

  property rules as ListImmutable<of Rule>

  property tape as String

  procedure setTape(tape as String)
    set property.tape to tape
  end procedure

  procedure append(rule as Rule)
    set property.rules to property.rules.withAppend(rule)
  end procedure

  procedure singleStep()
    let rule be findMatchingRule()
    call execute(rule)
  end procedure

  function isHalted() returns Boolean
    return property.currentState is property.haltState
  end function

  function findMatchingRule() returns Rule
    let matches be property.rules.filter(lambda r as Rule => (r.currentState is property.currentState) and (r.currentSymbol is property.tape[property.headPosition]))
    if matches.length() is 0 then
      throw exception "No rule matching state {property.currentState} and symbol {property.tape[property.headPosition]}"
    end if
    return matches.head()
  end function

  procedure write(newSymbol as String)
    let hp be property.headPosition
    set property.tape to property.tape[..hp] + newSymbol + property.tape[hp + 1..]
  end procedure

  procedure execute(rule as Rule)
    set property.currentState to rule.nextState
    call write(rule.writeSymbol)
    if rule.move is Dir.right then
      set property.headPosition to property.headPosition + 1
      if property.headPosition >= property.tape.length() then
        set property.tape to property.tape + " "
      end if
    else
      set property.headPosition to property.headPosition - 1
      if property.headPosition < 0 then
        set property.tape to " " + property.tape
        set property.headPosition to 0
      end if
    end if
  end procedure

end class

record Rule
  property currentState as String

  property currentSymbol as String

  property nextState as String

  property writeSymbol as String

  property move as Dir

  function asString() returns String
    return "{property.currentState},{property.currentSymbol},{property.nextState},{property.writeSymbol},{property.move}"
  end function

end record

function newRule(currentState as String, currentSymbol as String, nextState as String, writeSymbol as String, move as Dir) returns Rule
  return new Rule() with currentState set to currentState, currentSymbol set to currentSymbol, nextState set to nextState, writeSymbol set to writeSymbol, move set to move
end function

enum Dir left, right

# rename this method and define new transition rules to solve a different problem
procedure addRulesForRomanNumeralsInto(out tm as TuringMachine)
  # name: Denary to Roman "Numerals", initial state = "init", accept state = "halt"
  # Example tape input:  2024 (between 1 and 3999)
  call tm.append(newRule("init", "0", "init", "0", Dir.right))
  call tm.append(newRule("init", "1", "init", "1", Dir.right))
  call tm.append(newRule("init", "2", "init", "2", Dir.right))
  call tm.append(newRule("init", "3", "init", "3", Dir.right))
  call tm.append(newRule("init", "4", "init", "4", Dir.right))
  call tm.append(newRule("init", "5", "init", "5", Dir.right))
  call tm.append(newRule("init", "6", "init", "6", Dir.right))
  call tm.append(newRule("init", "7", "init", "7", Dir.right))
  call tm.append(newRule("init", "8", "init", "8", Dir.right))
  call tm.append(newRule("init", "9", "init", "9", Dir.right))
  call tm.append(newRule("init", " ", "return", "]", Dir.left))
  # read next digit
  call tm.append(newRule("readNextDigit", "0", "write0", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "1", "write1", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "2", "write2", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "3", "write3", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "4", "write4", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "5", "write5", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "6", "write6", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "7", "write7", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "8", "write8", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "9", "write9", "[", Dir.right))
  call tm.append(newRule("readNextDigit", "]", "gotoEnd", " ", Dir.right))
  # write0
  call tm.append(newRule("write0", "0", "write0", "0", Dir.right))
  call tm.append(newRule("write0", "1", "write0", "1", Dir.right))
  call tm.append(newRule("write0", "2", "write0", "2", Dir.right))
  call tm.append(newRule("write0", "3", "write0", "3", Dir.right))
  call tm.append(newRule("write0", "4", "write0", "4", Dir.right))
  call tm.append(newRule("write0", "5", "write0", "5", Dir.right))
  call tm.append(newRule("write0", "6", "write0", "6", Dir.right))
  call tm.append(newRule("write0", "7", "write0", "7", Dir.right))
  call tm.append(newRule("write0", "8", "write0", "8", Dir.right))
  call tm.append(newRule("write0", "9", "write0", "9", Dir.right))
  call tm.append(newRule("write0", "]", "write0", "]", Dir.right))
  call tm.append(newRule("write0", "I", "write0", "I", Dir.right))
  call tm.append(newRule("write0", "V", "write0", "V", Dir.right))
  call tm.append(newRule("write0", "X", "write0", "X", Dir.right))
  call tm.append(newRule("write0", "|", "write0", "|", Dir.right))
  call tm.append(newRule("write0", " ", "return", "|", Dir.left))
  # write1
  call tm.append(newRule("write1", "0", "write1", "0", Dir.right))
  call tm.append(newRule("write1", "1", "write1", "1", Dir.right))
  call tm.append(newRule("write1", "2", "write1", "2", Dir.right))
  call tm.append(newRule("write1", "3", "write1", "3", Dir.right))
  call tm.append(newRule("write1", "4", "write1", "4", Dir.right))
  call tm.append(newRule("write1", "5", "write1", "5", Dir.right))
  call tm.append(newRule("write1", "6", "write1", "6", Dir.right))
  call tm.append(newRule("write1", "7", "write1", "7", Dir.right))
  call tm.append(newRule("write1", "8", "write1", "8", Dir.right))
  call tm.append(newRule("write1", "9", "write1", "9", Dir.right))
  call tm.append(newRule("write1", "]", "write1", "]", Dir.right))
  call tm.append(newRule("write1", "I", "write1", "I", Dir.right))
  call tm.append(newRule("write1", "V", "write1", "V", Dir.right))
  call tm.append(newRule("write1", "X", "write1", "X", Dir.right))
  call tm.append(newRule("write1", "|", "write1", "|", Dir.right))
  call tm.append(newRule("write1", " ", "write0", "I", Dir.right))
  # write2 
  call tm.append(newRule("write2", "0", "write2", "0", Dir.right))
  call tm.append(newRule("write2", "1", "write2", "1", Dir.right))
  call tm.append(newRule("write2", "2", "write2", "2", Dir.right))
  call tm.append(newRule("write2", "3", "write2", "3", Dir.right))
  call tm.append(newRule("write2", "4", "write2", "4", Dir.right))
  call tm.append(newRule("write2", "5", "write2", "5", Dir.right))
  call tm.append(newRule("write2", "6", "write2", "6", Dir.right))
  call tm.append(newRule("write2", "7", "write2", "7", Dir.right))
  call tm.append(newRule("write2", "8", "write2", "8", Dir.right))
  call tm.append(newRule("write2", "9", "write2", "9", Dir.right))
  call tm.append(newRule("write2", "]", "write2", "]", Dir.right))
  call tm.append(newRule("write2", "I", "write2", "I", Dir.right))
  call tm.append(newRule("write2", "V", "write2", "V", Dir.right))
  call tm.append(newRule("write2", "X", "write2", "X", Dir.right))
  call tm.append(newRule("write2", "|", "write2", "|", Dir.right))
  call tm.append(newRule("write2", " ", "write1", "I", Dir.right))
  # write3 
  call tm.append(newRule("write3", "0", "write3", "0", Dir.right))
  call tm.append(newRule("write3", "1", "write3", "1", Dir.right))
  call tm.append(newRule("write3", "2", "write3", "2", Dir.right))
  call tm.append(newRule("write3", "3", "write3", "3", Dir.right))
  call tm.append(newRule("write3", "4", "write3", "4", Dir.right))
  call tm.append(newRule("write3", "5", "write3", "5", Dir.right))
  call tm.append(newRule("write3", "6", "write3", "6", Dir.right))
  call tm.append(newRule("write3", "7", "write3", "7", Dir.right))
  call tm.append(newRule("write3", "8", "write3", "8", Dir.right))
  call tm.append(newRule("write3", "9", "write3", "9", Dir.right))
  call tm.append(newRule("write3", "]", "write3", "]", Dir.right))
  call tm.append(newRule("write3", "I", "write3", "I", Dir.right))
  call tm.append(newRule("write3", "V", "write3", "V", Dir.right))
  call tm.append(newRule("write3", "X", "write3", "X", Dir.right))
  call tm.append(newRule("write3", "|", "write3", "|", Dir.right))
  call tm.append(newRule("write3", " ", "write2", "I", Dir.right))
  # write4 
  call tm.append(newRule("write4", "0", "write4", "0", Dir.right))
  call tm.append(newRule("write4", "1", "write4", "1", Dir.right))
  call tm.append(newRule("write4", "2", "write4", "2", Dir.right))
  call tm.append(newRule("write4", "3", "write4", "3", Dir.right))
  call tm.append(newRule("write4", "4", "write4", "4", Dir.right))
  call tm.append(newRule("write4", "5", "write4", "5", Dir.right))
  call tm.append(newRule("write4", "6", "write4", "6", Dir.right))
  call tm.append(newRule("write4", "7", "write4", "7", Dir.right))
  call tm.append(newRule("write4", "8", "write4", "8", Dir.right))
  call tm.append(newRule("write4", "9", "write4", "9", Dir.right))
  call tm.append(newRule("write4", "]", "write4", "]", Dir.right))
  call tm.append(newRule("write4", "I", "write4", "I", Dir.right))
  call tm.append(newRule("write4", "V", "write4", "V", Dir.right))
  call tm.append(newRule("write4", "X", "write4", "X", Dir.right))
  call tm.append(newRule("write4", "|", "write4", "|", Dir.right))
  call tm.append(newRule("write4", " ", "write5", "I", Dir.right))
  # write5
  call tm.append(newRule("write5", "0", "write5", "0", Dir.right))
  call tm.append(newRule("write5", "1", "write5", "1", Dir.right))
  call tm.append(newRule("write5", "2", "write5", "2", Dir.right))
  call tm.append(newRule("write5", "3", "write5", "3", Dir.right))
  call tm.append(newRule("write5", "4", "write5", "4", Dir.right))
  call tm.append(newRule("write5", "5", "write5", "5", Dir.right))
  call tm.append(newRule("write5", "6", "write5", "6", Dir.right))
  call tm.append(newRule("write5", "7", "write5", "7", Dir.right))
  call tm.append(newRule("write5", "8", "write5", "8", Dir.right))
  call tm.append(newRule("write5", "9", "write5", "9", Dir.right))
  call tm.append(newRule("write5", "]", "write5", "]", Dir.right))
  call tm.append(newRule("write5", "I", "write5", "I", Dir.right))
  call tm.append(newRule("write5", "V", "write5", "V", Dir.right))
  call tm.append(newRule("write5", "X", "write5", "X", Dir.right))
  call tm.append(newRule("write5", "|", "write5", "|", Dir.right))
  call tm.append(newRule("write5", " ", "write0", "V", Dir.right))
  # write6
  call tm.append(newRule("write6", "0", "write6", "0", Dir.right))
  call tm.append(newRule("write6", "1", "write6", "1", Dir.right))
  call tm.append(newRule("write6", "2", "write6", "2", Dir.right))
  call tm.append(newRule("write6", "3", "write6", "3", Dir.right))
  call tm.append(newRule("write6", "4", "write6", "4", Dir.right))
  call tm.append(newRule("write6", "5", "write6", "5", Dir.right))
  call tm.append(newRule("write6", "6", "write6", "6", Dir.right))
  call tm.append(newRule("write6", "7", "write6", "7", Dir.right))
  call tm.append(newRule("write6", "8", "write6", "8", Dir.right))
  call tm.append(newRule("write6", "9", "write6", "9", Dir.right))
  call tm.append(newRule("write6", "]", "write6", "]", Dir.right))
  call tm.append(newRule("write6", "I", "write6", "I", Dir.right))
  call tm.append(newRule("write6", "V", "write6", "V", Dir.right))
  call tm.append(newRule("write6", "X", "write6", "X", Dir.right))
  call tm.append(newRule("write6", "|", "write6", "|", Dir.right))
  call tm.append(newRule("write6", " ", "write1", "V", Dir.right))
  # write7
  call tm.append(newRule("write7", "0", "write7", "0", Dir.right))
  call tm.append(newRule("write7", "1", "write7", "1", Dir.right))
  call tm.append(newRule("write7", "2", "write7", "2", Dir.right))
  call tm.append(newRule("write7", "3", "write7", "3", Dir.right))
  call tm.append(newRule("write7", "4", "write7", "4", Dir.right))
  call tm.append(newRule("write7", "5", "write7", "5", Dir.right))
  call tm.append(newRule("write7", "6", "write7", "6", Dir.right))
  call tm.append(newRule("write7", "7", "write7", "7", Dir.right))
  call tm.append(newRule("write7", "8", "write7", "8", Dir.right))
  call tm.append(newRule("write7", "9", "write7", "9", Dir.right))
  call tm.append(newRule("write7", "]", "write7", "]", Dir.right))
  call tm.append(newRule("write7", "I", "write7", "I", Dir.right))
  call tm.append(newRule("write7", "V", "write7", "V", Dir.right))
  call tm.append(newRule("write7", "X", "write7", "X", Dir.right))
  call tm.append(newRule("write7", "|", "write7", "|", Dir.right))
  call tm.append(newRule("write7", " ", "write2", "V", Dir.right))
  # write8
  call tm.append(newRule("write8", "0", "write8", "0", Dir.right))
  call tm.append(newRule("write8", "1", "write8", "1", Dir.right))
  call tm.append(newRule("write8", "2", "write8", "2", Dir.right))
  call tm.append(newRule("write8", "3", "write8", "3", Dir.right))
  call tm.append(newRule("write8", "4", "write8", "4", Dir.right))
  call tm.append(newRule("write8", "5", "write8", "5", Dir.right))
  call tm.append(newRule("write8", "6", "write8", "6", Dir.right))
  call tm.append(newRule("write8", "7", "write8", "7", Dir.right))
  call tm.append(newRule("write8", "8", "write8", "8", Dir.right))
  call tm.append(newRule("write8", "9", "write8", "9", Dir.right))
  call tm.append(newRule("write8", "]", "write8", "]", Dir.right))
  call tm.append(newRule("write8", "I", "write8", "I", Dir.right))
  call tm.append(newRule("write8", "V", "write8", "V", Dir.right))
  call tm.append(newRule("write8", "X", "write8", "X", Dir.right))
  call tm.append(newRule("write8", "|", "write8", "|", Dir.right))
  call tm.append(newRule("write8", " ", "write3", "V", Dir.right))
  # write9
  call tm.append(newRule("write9", "0", "write9", "0", Dir.right))
  call tm.append(newRule("write9", "1", "write9", "1", Dir.right))
  call tm.append(newRule("write9", "2", "write9", "2", Dir.right))
  call tm.append(newRule("write9", "3", "write9", "3", Dir.right))
  call tm.append(newRule("write9", "4", "write9", "4", Dir.right))
  call tm.append(newRule("write9", "5", "write9", "5", Dir.right))
  call tm.append(newRule("write9", "6", "write9", "6", Dir.right))
  call tm.append(newRule("write9", "7", "write9", "7", Dir.right))
  call tm.append(newRule("write9", "8", "write9", "8", Dir.right))
  call tm.append(newRule("write9", "9", "write9", "9", Dir.right))
  call tm.append(newRule("write9", "]", "write9", "]", Dir.right))
  call tm.append(newRule("write9", "I", "write9", "I", Dir.right))
  call tm.append(newRule("write9", "V", "write9", "V", Dir.right))
  call tm.append(newRule("write9", "X", "write9", "X", Dir.right))
  call tm.append(newRule("write9", "|", "write9", "|", Dir.right))
  call tm.append(newRule("write9", " ", "write10", "I", Dir.right))
  # Write10
  call tm.append(newRule("write10", " ", "write0", "X", Dir.right))
  # return 
  call tm.append(newRule("return", "0", "return", "0", Dir.left))
  call tm.append(newRule("return", "1", "return", "1", Dir.left))
  call tm.append(newRule("return", "2", "return", "2", Dir.left))
  call tm.append(newRule("return", "3", "return", "3", Dir.left))
  call tm.append(newRule("return", "4", "return", "4", Dir.left))
  call tm.append(newRule("return", "5", "return", "5", Dir.left))
  call tm.append(newRule("return", "6", "return", "6", Dir.left))
  call tm.append(newRule("return", "7", "return", "7", Dir.left))
  call tm.append(newRule("return", "8", "return", "8", Dir.left))
  call tm.append(newRule("return", "9", "return", "9", Dir.left))
  call tm.append(newRule("return", "I", "return", "I", Dir.left))
  call tm.append(newRule("return", "V", "return", "V", Dir.left))
  call tm.append(newRule("return", "X", "return", "X", Dir.left))
  call tm.append(newRule("return", "|", "return", "|", Dir.left))
  call tm.append(newRule("return", "]", "return", "]", Dir.left))
  call tm.append(newRule("return", "[", "readNextDigit", " ", Dir.right))
  call tm.append(newRule("return", " ", "readNextDigit", " ", Dir.right))
  # gotoEnd -  only after deleting input.
  call tm.append(newRule("gotoEnd", "|", "gotoEnd", "|", Dir.right))
  call tm.append(newRule("gotoEnd", "I", "gotoEnd", "I", Dir.right))
  call tm.append(newRule("gotoEnd", "V", "gotoEnd", "V", Dir.right))
  call tm.append(newRule("gotoEnd", "X", "gotoEnd", "X", Dir.right))
  call tm.append(newRule("gotoEnd", " ", "deleteLastBar", " ", Dir.left))
  call tm.append(newRule("deleteLastBar", "|", "symbols1", " ", Dir.left))
  # symbols1
  call tm.append(newRule("symbols1", "I", "symbols1", "I", Dir.left))
  call tm.append(newRule("symbols1", "V", "symbols1", "V", Dir.left))
  call tm.append(newRule("symbols1", "X", "symbols1", "X", Dir.left))
  call tm.append(newRule("symbols1", "|", "symbols10", "|", Dir.left))
  call tm.append(newRule("symbols1", " ", "removeBars", " ", Dir.right))
  call tm.append(newRule("symbols10", "I", "symbols10", "X", Dir.left))
  call tm.append(newRule("symbols10", "V", "symbols10", "L", Dir.left))
  call tm.append(newRule("symbols10", "X", "symbols10", "C", Dir.left))
  call tm.append(newRule("symbols10", "|", "symbols100", "|", Dir.left))
  call tm.append(newRule("symbols10", " ", "removeBars", " ", Dir.right))
  call tm.append(newRule("symbols100", "I", "symbols100", "C", Dir.left))
  call tm.append(newRule("symbols100", "V", "symbols100", "D", Dir.left))
  call tm.append(newRule("symbols100", "X", "symbols100", "M", Dir.left))
  call tm.append(newRule("symbols100", "|", "symbols1000", "|", Dir.left))
  call tm.append(newRule("symbols100", " ", "removeBars", " ", Dir.right))
  call tm.append(newRule("symbols1000", "I", "symbols1000", "M", Dir.left))
  call tm.append(newRule("symbols1000", " ", "removeBars", " ", Dir.right))
  # Remove bars
  call tm.append(newRule("removeBars", "|", "removeBars", " ", Dir.right))
  call tm.append(newRule("removeBars", "I", "moveI", " ", Dir.right))
  call tm.append(newRule("removeBars", "V", "moveV", " ", Dir.right))
  call tm.append(newRule("removeBars", "X", "moveX", " ", Dir.right))
  call tm.append(newRule("removeBars", "L", "moveL", " ", Dir.right))
  call tm.append(newRule("removeBars", "C", "moveC", " ", Dir.right))
  call tm.append(newRule("removeBars", "D", "moveD", " ", Dir.right))
  call tm.append(newRule("removeBars", "M", "moveM", " ", Dir.right))
  call tm.append(newRule("nextChar", "|", "nextChar", "|", Dir.right))
  call tm.append(newRule("nextChar", " ", "checkForBars", " ", Dir.left))
  call tm.append(newRule("nextChar", "I", "moveI", "|", Dir.right))
  call tm.append(newRule("nextChar", "V", "moveV", "|", Dir.right))
  call tm.append(newRule("nextChar", "X", "moveX", "|", Dir.right))
  call tm.append(newRule("nextChar", "L", "moveL", "|", Dir.right))
  call tm.append(newRule("nextChar", "C", "moveC", "|", Dir.right))
  call tm.append(newRule("nextChar", "D", "moveD", "|", Dir.right))
  call tm.append(newRule("nextChar", "M", "moveM", "|", Dir.right))
  # moveI
  call tm.append(newRule("moveI", "|", "nextChar", "I", Dir.right))
  call tm.append(newRule("moveI", "I", "writeI", "I", Dir.left))
  call tm.append(newRule("moveI", "V", "writeI", "V", Dir.left))
  call tm.append(newRule("moveI", "X", "writeI", "X", Dir.left))
  call tm.append(newRule("moveI", " ", "writeI", " ", Dir.left))
  # moveV
  call tm.append(newRule("moveV", "|", "nextChar", "V", Dir.right))
  call tm.append(newRule("moveV", "I", "writeV", "I", Dir.left))
  call tm.append(newRule("moveV", " ", "writeV", " ", Dir.left))
  # moveX 
  call tm.append(newRule("moveX", "|", "nextChar", "X", Dir.right))
  call tm.append(newRule("moveX", "I", "writeX", "I", Dir.left))
  call tm.append(newRule("moveX", "V", "writeX", "V", Dir.left))
  call tm.append(newRule("moveX", "X", "writeX", "X", Dir.left))
  call tm.append(newRule("moveX", "L", "writeX", "L", Dir.left))
  call tm.append(newRule("moveX", "C", "writeX", "C", Dir.left))
  call tm.append(newRule("moveX", " ", "writeX", " ", Dir.left))
  # moveL 
  call tm.append(newRule("moveL", "|", "nextChar", "L", Dir.right))
  call tm.append(newRule("moveL", "I", "writeL", "I", Dir.left))
  call tm.append(newRule("moveL", "V", "writeL", "V", Dir.left))
  call tm.append(newRule("moveL", "X", "writeL", "X", Dir.left))
  call tm.append(newRule("moveL", " ", "writeL", " ", Dir.left))
  # moveC 
  call tm.append(newRule("moveC", "|", "nextChar", "C", Dir.right))
  call tm.append(newRule("moveC", "I", "writeC", "I", Dir.left))
  call tm.append(newRule("moveC", "V", "writeC", "V", Dir.left))
  call tm.append(newRule("moveC", "X", "writeC", "X", Dir.left))
  call tm.append(newRule("moveC", "L", "writeC", "L", Dir.left))
  call tm.append(newRule("moveC", "C", "writeC", "C", Dir.left))
  call tm.append(newRule("moveC", "D", "writeC", "D", Dir.left))
  call tm.append(newRule("moveC", "M", "writeC", "M", Dir.left))
  call tm.append(newRule("moveC", " ", "writeC", " ", Dir.left))
  # moveD 
  call tm.append(newRule("moveD", "|", "nextChar", "D", Dir.right))
  call tm.append(newRule("moveD", "I", "writeD", "I", Dir.left))
  call tm.append(newRule("moveD", "V", "writeD", "V", Dir.left))
  call tm.append(newRule("moveD", "X", "writeD", "X", Dir.left))
  call tm.append(newRule("moveD", "L", "writeD", "L", Dir.left))
  call tm.append(newRule("moveD", "C", "writeD", "C", Dir.left))
  call tm.append(newRule("moveD", " ", "writeD", " ", Dir.left))
  # moveM
  call tm.append(newRule("moveM", "|", "nextChar", "M", Dir.right))
  call tm.append(newRule("moveM", "I", "writeM", "I", Dir.left))
  call tm.append(newRule("moveM", "V", "writeM", "V", Dir.left))
  call tm.append(newRule("moveM", "X", "writeM", "X", Dir.left))
  call tm.append(newRule("moveM", "L", "writeM", "L", Dir.left))
  call tm.append(newRule("moveM", "C", "writeM", "C", Dir.left))
  call tm.append(newRule("moveM", "D", "writeM", "D", Dir.left))
  call tm.append(newRule("moveM", "M", "writeM", "M", Dir.left))
  call tm.append(newRule("moveM", " ", "writeM", " ", Dir.left))
  # write char
  call tm.append(newRule("writeI", "|", "nextChar", "I", Dir.right))
  call tm.append(newRule("writeI", " ", "nextChar", "I", Dir.right))
  call tm.append(newRule("writeV", "|", "nextChar", "V", Dir.right))
  call tm.append(newRule("writeV", " ", "nextChar", "V", Dir.right))
  call tm.append(newRule("writeX", "|", "nextChar", "X", Dir.right))
  call tm.append(newRule("writeX", " ", "nextChar", "X", Dir.right))
  call tm.append(newRule("writeL", "|", "nextChar", "L", Dir.right))
  call tm.append(newRule("writeL", " ", "nextChar", "L", Dir.right))
  call tm.append(newRule("writeC", "|", "nextChar", "C", Dir.right))
  call tm.append(newRule("writeC", " ", "nextChar", "C", Dir.right))
  call tm.append(newRule("writeD", "|", "nextChar", "D", Dir.right))
  call tm.append(newRule("writeD", " ", "nextChar", "D", Dir.right))
  call tm.append(newRule("writeM", "|", "nextChar", "M", Dir.right))
  call tm.append(newRule("writeM", " ", "nextChar", "M", Dir.right))
  # checkForBars 
  call tm.append(newRule("checkForBars", "I", "checkForBars", "I", Dir.left))
  call tm.append(newRule("checkForBars", "V", "checkForBars", "V", Dir.left))
  call tm.append(newRule("checkForBars", "X", "checkForBars", "X", Dir.left))
  call tm.append(newRule("checkForBars", "L", "checkForBars", "L", Dir.left))
  call tm.append(newRule("checkForBars", "C", "checkForBars", "C", Dir.left))
  call tm.append(newRule("checkForBars", "D", "checkForBars", "D", Dir.left))
  call tm.append(newRule("checkForBars", "M", "checkForBars", "M", Dir.left))
  call tm.append(newRule("checkForBars", "|", "barFound", "|", Dir.left))
  call tm.append(newRule("checkForBars", " ", "halt", " ", Dir.right))
  # barFound
  call tm.append(newRule("barFound", "I", "barFound", "I", Dir.left))
  call tm.append(newRule("barFound", "V", "barFound", "V", Dir.left))
  call tm.append(newRule("barFound", "X", "barFound", "X", Dir.left))
  call tm.append(newRule("barFound", "L", "barFound", "L", Dir.left))
  call tm.append(newRule("barFound", "C", "barFound", "C", Dir.left))
  call tm.append(newRule("barFound", "D", "barFound", "D", Dir.left))
  call tm.append(newRule("barFound", "M", "barFound", "M", Dir.left))
  call tm.append(newRule("barFound", "|", "barFound", "|", Dir.left))
  call tm.append(newRule("barFound", " ", "removeBars", " ", Dir.right))
end procedure
