# e3514e75e757493b249dffbce7f795013168fbb3ba4334dd04d904af6d52304c Elan 1.1.2 guest default_profile valid

# Use the W,A,S,D keys to change Snake direction
main
  let blocks be new Array2D<of Int>(40, 30, white)
  let snake be new Snake()
  let apple be new Apple()
  call apple.newRandomPosition(snake)
  while not snake.gameOver()
    call snake.updateBlocks(blocks)
    call apple.updateBlocks(blocks)
    call displayBlocks(blocks)
    call pause(150)
    call snake.clockTick(getKey(), apple)
  end while
  print "Game Over! Score: {snake.score()}"
end main

class Snake
  constructor()
    let tail be new Square(20, 15)
    set property.currentDir to Direction.right
    set property.body to [tail]
    set property.head to tail.getAdjacentSquare(property.currentDir)
    set property.priorTail to tail
  end constructor

  private property currentDir as Direction

  private property head as Square

  private property body as List<of Square>

  private property priorTail as Square

  procedure clockTick(key as String, apple as Apple)
    call setDirection(key)
    set property.priorTail to property.body[0]
    call property.body.append(property.head)
    set property.head to property.head.getAdjacentSquare(property.currentDir)
    if property.head is apple.location then
      call apple.newRandomPosition(this)
    else
      set property.body to property.body[1..]
    end if
  end procedure

  procedure updateBlocks(blocks as Array2D<of Int>)
    call blocks.put(property.head.x, property.head.y, green)
    if property.body[0] isnt property.priorTail then
      call blocks.put(property.priorTail.x, property.priorTail.y, white)
    end if
  end procedure

  function score() returns Int
    return property.body.length() - 1
  end function

  function bodyCovers(sq as Square) returns Boolean
    variable result set to false
    each seg in property.body
      if (seg is sq) then
        set result to true
      end if
    end each
    return result
  end function

  function gameOver() returns Boolean
    return bodyCovers(property.head) or property.head.hasHitEdge()
  end function

  private procedure setDirection(key as String)
    if key is "w" then
      set property.currentDir to Direction.up
    else if key is "s" then
      set property.currentDir to Direction.down
    else if key is "a" then
      set property.currentDir to Direction.left
    else if key is "d" then
      set property.currentDir to Direction.right
    end if
  end procedure

end class

class Apple
  property location as Square

  procedure newRandomPosition(snake as Snake)
    repeat
      let ranX be randomInt(0, 39)
      let ranY be randomInt(0, 29)
      set property.location to new Square(ranX, ranY)
    end repeat when not snake.bodyCovers(property.location)
  end procedure

  procedure updateBlocks(blocks as Array2D<of Int>)
    call blocks.put(property.location.x, property.location.y, red)
  end procedure

end class

class Square
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

  function getAdjacentSquare(d as Direction) returns Square
    variable newX set to property.x
    variable newY set to property.y
    if d is Direction.left then
      set newX to property.x - 1
    else if d is Direction.right then
      set newX to property.x + 1
    else if d is Direction.up then
      set newY to property.y - 1
    else if d is Direction.down then
      set newY to property.y + 1
    end if
    return new Square(newX, newY)
  end function

  function hasHitEdge() returns Boolean
    return (property.x is -1) or (property.y is -1) or (property.x is 40) or (property.y is 30)
  end function

end class

enum Direction up, down, left, right

test snake
  let snake be new Snake()
  # bodyCovers
  assert snake.bodyCovers(new Square(20, 15)) is true
  assert snake.bodyCovers(new Square(21, 15)) is false
  # gameOver, score - can only test for default - which is not thorough test
  assert snake.gameOver() is false
  assert snake.score() is 0
end test

test apple
  # constructor has no user code to test
  # newRandomPosition is a procedure
end test

test square
  # constructor - not testable as properties are private
  # getAdjacentSquare
  let sq1 be new Square(3, 4)
  assert sq1.getAdjacentSquare(Direction.up) is new Square(3, 3)
  assert sq1.getAdjacentSquare(Direction.down) is new Square(3, 5)
  assert sq1.getAdjacentSquare(Direction.left) is new Square(2, 4)
  assert sq1.getAdjacentSquare(Direction.right) is new Square(4, 4)
  let sq2 be new Square(0, 0)
  let sq3 be new Square(-1, 0)
  assert sq2.getAdjacentSquare(Direction.left) is sq3
  # hasHitEdge
  assert (new Square(0, 0)).hasHitEdge() is false
  assert (new Square(39, 20)).hasHitEdge() is false
  assert (new Square(-1, 3)).hasHitEdge() is true
  assert (new Square(3, -1)).hasHitEdge() is true
  assert (new Square(40, 3)).hasHitEdge() is true
  assert (new Square(3, 30)).hasHitEdge() is true
end test

# Testcoverage: 45% (40/88 instructions)
