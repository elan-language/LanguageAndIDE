# 35bb436f40a328a136971d2fa3a6db147a2a0a8c0922d9908c669380bfc89e9b Elan 1.3.0 guest default_profile valid

# Use the w,a,s,d keys to change snake's direction
main
  let blocks be new Array2D<of Int>(40, 30, white)
  variable head set to [20, 15]
  variable tail set to head
  let body be [head]
  variable currentDir set to "right"
  variable gameOn set to true
  variable apple set to [0, 0]
  call setAppleToRandomPosition(apple, body)
  while gameOn
    call updateDisplay(blocks, head, tail, body, apple)
    call updateSnake(currentDir, tail, head, body)
    set gameOn to not hasHitEdge(head[0], head[1]) and not body.contains(head)
    if head is apple then
      call setAppleToRandomPosition(apple, body)
    else
      call body.removeAt(0)
    end if
    call pause(150)
  end while
  print "Game Over! Score: {body.length() - 1}"
end main

procedure updateSnake(out currentDir as String, out tail as List<of Int>, out head as List<of Int>, body as List<of List<of Int>>)
  set currentDir to directionByKey(currentDir, getKey())
  set tail to body[0]
  call body.append(head)
  set head to getAdjacentSquare(head, currentDir)
end procedure

procedure updateDisplay(blocks as Array2D<of Int>, head as List<of Int>, tail as List<of Int>, body as List<of List<of Int>>, apple as List<of Int>)
  call blocks.put(head[0], head[1], green)
  let tailColour be getTailColour(tail, body)
  call blocks.put(tail[0], tail[1], tailColour)
  call blocks.put(apple[0], apple[1], red)
  call displayBlocks(blocks)
end procedure

procedure setAppleToRandomPosition(out apple as List<of Int>, body as List<of List<of Int>>)
  repeat
    set apple to [randomInt(0, 39), randomInt(0, 29)]
  end repeat when not body.contains(apple)
end procedure

function getTailColour(tail as List<of Int>, body as List<of List<of Int>>) returns Int
  variable colour set to white
  if body[0] is tail then
    set colour to green
  end if
  return colour
end function

function hasHitEdge(headX as Int, headY as Int) returns Boolean
  return (headX < 0) or (headY < 0) or (headX > 39) or (headY > 29)
end function

function getAdjacentSquare(sq as List<of Int>, dir as String) returns List<of Int>
  variable newX set to sq[0]
  variable newY set to sq[1]
  if dir is "left" then
    set newX to newX - 1
  else if dir is "right" then
    set newX to newX + 1
  else if dir is "up" then
    set newY to newY - 1
  else if dir is "down" then
    set newY to newY + 1
  end if
  return [newX, newY]
end function

function directionByKey(current as String, key as String) returns String
  variable dir set to current
  let dict be ["w":"up", "s":"down", "a":"left", "d":"right"]
  if dict.keys().contains(key) then
    set dir to dict[key]
  end if
  return dir
end function

test getTailColour
  assert getTailColour([3, 4], [[3, 4], [3, 5]]) is green
  assert getTailColour([3, 4], [[3, 5], [3, 6]]) is white
end test

test hasHitEdge
  assert hasHitEdge(0, 0) is false
  assert hasHitEdge(0, 29) is false
  assert hasHitEdge(39, 0) is false
  assert hasHitEdge(29, 29) is false
  assert hasHitEdge(-1, 5) is true
  assert hasHitEdge(5, 30) is true
  assert hasHitEdge(40, 5) is true
  assert hasHitEdge(5, -1) is true
end test

test getAdjacentSquare
  let sq be [20, 15]
  assert getAdjacentSquare(sq, "up") is [20, 14]
  assert getAdjacentSquare(sq, "down") is [20, 16]
  assert getAdjacentSquare(sq, "left") is [19, 15]
  assert getAdjacentSquare(sq, "right") is [21, 15]
  # boundary
  assert getAdjacentSquare([0, 15], "left") is [-1, 15]
end test

test directionByKey
  let current be "up"
  assert directionByKey(current, "") is "up"
  assert directionByKey(current, "x") is "up"
  assert directionByKey(current, "w") is "up"
  assert directionByKey(current, "s") is "down"
  assert directionByKey(current, "a") is "left"
  assert directionByKey(current, "d") is "right"
  assert directionByKey(current, "D") is "up"
end test
