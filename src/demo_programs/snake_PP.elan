# dd9da0380dac5aa47a3eb5c14c912fae18f740b6f2b4b90d4d80450755182902 Elan 1.1.2 guest default_profile valid

# Use the W,A,S,D keys to change Snake direction
main
  let blocks be new Array2D<of Int>(40, 30, white)
  variable head set to [20, 15]
  variable tail set to head
  variable body set to [head]
  variable currentDir set to "right"
  variable gameOn set to true
  variable apple set to [0, 0]
  call setAppleToRandomPosition(apple, body)
  while gameOn
    call blocks.put(head[0], head[1], green)
    variable paintTail set to white
    if body[0] is tail then
      set paintTail to green
    end if
    call blocks.put(tail[0], tail[1], paintTail)
    call blocks.put(apple[0], apple[1], red)
    call displayBlocks(blocks)
    set currentDir to directionByKey(currentDir, getKey())
    set tail to body[0]
    call body.append(head)
    set head to getAdjacentSquare(head, currentDir)
    set gameOn to not hasHitEdge(head[0], head[1]) and not overlaps(body, head)
    if head is apple then
      call setAppleToRandomPosition(apple, body)
    else
      call body.removeAt(0)
    end if
    call pause(150)
  end while
  print "Game Over! Score: {body.length() - 1}"
end main

procedure setAppleToRandomPosition(out apple as List<of Int>, body as List<of List<of Int>>)
  repeat
    set apple to [randomInt(0, 39), randomInt(0, 29)]
  end repeat when not overlaps(body, apple)
end procedure

function hasHitEdge(headX as Int, headY as Int) returns Boolean
  return (headX < 0) or (headY < 0) or (headX > 39) or (headY > 29)
end function

function getAdjacentSquare(sq as List<of Int>, dir as String) returns List<of Int>
  variable newX set to sq[0]
  variable newY set to sq[1]
  if dir is "left" then
    set newX to newX - 1
  else if dir is "right" then
    set newX to newX + 1
  else if dir is "up" then
    set newY to newY - 1
  else if dir is "down" then
    set newY to newY + 1
  end if
  return [newX, newY]
end function

function overlaps(body as List<of List<of Int>>, sq as List<of Int>) returns Boolean
  variable result set to false
  each seg in body
    if (seg is sq) then
      set result to true
    end if
  end each
  return result
end function

function directionByKey(current as String, key as String) returns String
  variable dir set to current
  if key is "w" then
    set dir to "up"
  else if key is "s" then
    set dir to "down"
  else if key is "a" then
    set dir to "left"
  else if key is "d" then
    set dir to "right"
  end if
  return dir
end function

test hasHitEdge
  assert hasHitEdge(0, 0) is false
  assert hasHitEdge(0, 29) is false
  assert hasHitEdge(39, 0) is false
  assert hasHitEdge(29, 29) is false
  assert hasHitEdge(-1, 5) is true
  assert hasHitEdge(5, 30) is true
  assert hasHitEdge(40, 5) is true
  assert hasHitEdge(5, -1) is true
end test

test getAdjacentSquare
  let sq be [20, 15]
  assert getAdjacentSquare(sq, "up") is [20, 14]
  assert getAdjacentSquare(sq, "down") is [20, 16]
  assert getAdjacentSquare(sq, "left") is [19, 15]
  assert getAdjacentSquare(sq, "right") is [21, 15]
  # boundary
  assert getAdjacentSquare([0, 15], "left") is [-1, 15]
end test

test directionByKey
  let current be "up"
  assert directionByKey(current, "") is "up"
  assert directionByKey(current, "x") is "up"
  assert directionByKey(current, "w") is "up"
  assert directionByKey(current, "s") is "down"
  assert directionByKey(current, "a") is "left"
  assert directionByKey(current, "d") is "right"
  assert directionByKey(current, "D") is "up"
end test

test overlaps
  let body be [[1, 2], [3, 4]]
  assert overlaps(body, [1, 2]) is true
  assert overlaps(body, [3, 4]) is true
  assert overlaps(body, [1, 1]) is false
  assert overlaps(body, [2, 1]) is false
end test

# Test coverage: 48% (29/61 instructions)
