# 88d1f88f5fb62fab085ceab41901be95ffcd91d5246179b8297333368c9281d4 Elan 1.1.2 guest default_profile valid

main
  variable grid set to new Array2D<of Int>(40, 30, white)
  call fillRandom(grid)
  while true
    call displayBlocks(grid)
    call nextGeneration(grid)
    call pause(50)
  end while
end main

procedure fillRandom(grid as Array2D<of Int>)
  for col from 0 to 39 step 1
    for row from 0 to 29 step 1
      let cell be if random() > 0.5 then black else white
      call grid.put(col, row, cell)
    end for
  end for
end procedure

function north(cell as (Int, Int)) returns (Int, Int)
  let x, y be cell
  let y2 be if y is 0 then 29 else y - 1
  return tuple(x, y2)
end function

function south(cell as (Int, Int)) returns (Int, Int)
  let x, y be cell
  let y2 be if y is 29 then 0 else y + 1
  return tuple(x, y2)
end function

function east(cell as (Int, Int)) returns (Int, Int)
  let x, y be cell
  let x2 be if x is 39 then 0 else x + 1
  return tuple(x2, y)
end function

function west(cell as (Int, Int)) returns (Int, Int)
  let x, y be cell
  let x2 be if x is 0 then 39 else x - 1
  return tuple(x2, y)
end function

function neighbourCells(x as Int, y as Int) returns List<of (Int, Int)>
  let c be tuple(x, y)
  return [north(west(c)), north(c), north(east(c)), west(c), east(c), south(west(c)), south(c), south(east(c))]
end function

function liveNeighbours(grid as Array2D<of Int>, x as Int, y as Int) returns Int
  variable count set to 0
  each cell in neighbourCells(x, y)
    let cx, cy be cell
    set count to if grid[cx, cy] is black then count + 1 else count
  end each
  return count
end function

function willLive(cell as Int, liveNeighbours as Int) returns Boolean
  return if cell is black then (liveNeighbours > 1) and (liveNeighbours < 4) else liveNeighbours is 3
end function

function nextCellValue(grid as Array2D<of Int>, x as Int, y as Int) returns Boolean
  return willLive(grid[x, y], liveNeighbours(grid, x, y))
end function

procedure nextGeneration(out grid as Array2D<of Int>)
  let next be new Array2D<of Int>(40, 30, white)
  for x from 0 to 39 step 1
    for y from 0 to 29 step 1
      let colour be if nextCellValue(grid, x, y) then black else white
      call next.put(x, y, colour)
    end for
  end for
  set grid to next
end procedure

constant black set to 0x000000

constant white set to 0xffffff

test north
  assert north(tuple(3, 4)) is tuple(3, 3)
  assert north(tuple(39, 0)) is tuple(39, 29)
  assert north(tuple(0, 29)) is tuple(0, 28)
  assert north(tuple(39, 29)) is tuple(39, 28)
end test

test south
  assert south(tuple(3, 4)) is tuple(3, 5)
  assert south(tuple(39, 0)) is tuple(39, 1)
  assert south(tuple(0, 29)) is tuple(0, 0)
  assert south(tuple(39, 29)) is tuple(39, 0)
end test

test east
  assert east(tuple(10, 2)) is tuple(11, 2)
  assert east(tuple(39, 0)) is tuple(0, 0)
  assert east(tuple(0, 1)) is tuple(1, 1)
  assert east(tuple(39, 29)) is tuple(0, 29)
end test

test 
  assert west(tuple(3, 4)) is tuple(2, 4)
  assert west(tuple(39, 0)) is tuple(38, 0)
  assert west(tuple(0, 0)) is tuple(39, 0)
  assert west(tuple(0, 29)) is tuple(39, 29)
end test

test north_east
  assert north(east(tuple(3, 4))) is tuple(4, 3)
  assert north(east(tuple(0, 0))) is tuple(1, 29)
  assert north(east(tuple(39, 0))) is tuple(0, 29)
  assert north(east(tuple(0, 29))) is tuple(1, 28)
  assert north(east(tuple(39, 29))) is tuple(0, 28)
end test

test 
  assert south(east(tuple(3, 4))) is tuple(4, 5)
  assert south(east(tuple(0, 0))) is tuple(1, 1)
  assert south(east(tuple(39, 0))) is tuple(0, 1)
  assert south(east(tuple(0, 29))) is tuple(1, 0)
  assert south(east(tuple(39, 29))) is tuple(0, 0)
end test

test 
  assert north(west(tuple(3, 4))) is tuple(2, 3)
  assert north(west(tuple(0, 0))) is tuple(39, 29)
  assert north(west(tuple(39, 0))) is tuple(38, 29)
  assert north(west(tuple(0, 29))) is tuple(39, 28)
  assert north(west(tuple(39, 29))) is tuple(38, 28)
end test

test 
  assert south(west(tuple(3, 4))) is tuple(2, 5)
  assert south(west(tuple(0, 0))) is tuple(39, 1)
  assert south(west(tuple(39, 0))) is tuple(38, 1)
  assert south(west(tuple(0, 29))) is tuple(39, 0)
  assert south(west(tuple(39, 29))) is tuple(38, 0)
end test

test 
  assert neighbourCells(3, 4) is [tuple(2, 3), tuple(3, 3), tuple(4, 3), tuple(2, 4), tuple(4, 4), tuple(2, 5), tuple(3, 5), tuple(4, 5)]
end test

test 
  assert willLive(white, 0) is false
  assert willLive(white, 1) is false
  assert willLive(white, 2) is false
  assert willLive(white, 3) is true
  assert willLive(white, 4) is false
  assert willLive(white, 5) is false
  assert willLive(white, 6) is false
  assert willLive(white, 7) is false
  assert willLive(white, 8) is false
  assert willLive(black, 0) is false
  assert willLive(black, 1) is false
  assert willLive(black, 2) is true
  assert willLive(black, 3) is true
  assert willLive(black, 4) is false
  assert willLive(black, 5) is false
  assert willLive(black, 6) is false
  assert willLive(black, 7) is false
  assert willLive(black, 8) is false
end test
